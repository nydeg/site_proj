from flask import Flask, render_template, redirect, url_for, request
from data import db_session
from data.users import User
from forms.register import RegisterForm
from flask_login import LoginManager, login_user, current_user
from forms.login import LoginForm
from data.jobs import Jobs
import sqlite3
import multiprocessing as mp
import telebot
from telebot import types
import datetime as dt
import threading

bot = telebot.TeleBot('5830879893:AAGDZTLWWZwzzRkSFpWfUbTfYbL9TWHQehI')

plans = {}
LOGIN = False
app = Flask(__name__)
login_manager = LoginManager()
login_manager.init_app(app)
app.config['SECRET_KEY'] = 'random string'
id_log = 0


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–î–∞')
    item2 = types.KeyboardButton('–ù–µ—Ç')

    markup.add(item1, item2)

    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {0.first_name}!\n–Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, '
                                      '–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –ø–ª–∞–Ω–∞—Ö\n–í—ã '
                                      '—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Å–∞–π—Ç–µ?'.format(message.from_user),
                     reply_markup=markup)


@login_manager.user_loader
def load_user(user_id):
    db_sess = db_session.create_session()
    return db_sess.query(User).get(user_id)


@app.route("/")
def index():
    db_sess = db_session.create_session()

    if LOGIN:
        todo_list = db_sess.query(Jobs).all()
        return render_template("main.html", todo_list=todo_list, id_log=id_log, title='–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    else:
        return render_template("base.html", title='–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')


@app.post('/add')
def add():
    title = request.form.get('title')
    db_sess = db_session.create_session()
    new_plan = Jobs(title=title, is_finished=False)
    current_user.jobs.append(new_plan)
    db_sess.merge(current_user)
    db_sess.commit()
    return redirect(url_for('index'))


@app.get('/update/<int:todo_id>')
def update(todo_id):
    db_sess = db_session.create_session()
    todo = db_sess.query(Jobs).filter(Jobs.id == todo_id).first()
    todo.is_finished = not todo.is_finished
    db_sess.commit()
    return redirect(url_for('index'))


@app.get('/delete/<int:todo_id>')
def delete(todo_id):
    db_sess = db_session.create_session()
    todo = db_sess.query(Jobs).filter(Jobs.id == todo_id).first()
    db_sess.delete(todo)
    db_sess.commit()

    con = sqlite3.connect('db/blogs.db')
    cur = con.cursor()
    planss = cur.execute("""SELECT title from jobs""").fetchall()
    planss = [i[0] for i in planss]
    length = len(planss)
    if length > 0:
        for my_id in range(1, length + 1):
            cur.execute("""UPDATE jobs
                        SET id = ?
                        WHERE title = ?""", (my_id, planss[my_id - 1]))
    con.commit()
    con.close()

    return redirect(url_for('index'))


@app.route('/register', methods=['GET', 'POST'])
def reqister():
    form = RegisterForm()
    if form.validate_on_submit():
        if form.password.data != form.password_again.data:
            return render_template('register.html', title='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                                   form=form,
                                   message="–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        db_sess = db_session.create_session()
        if db_sess.query(User).filter(User.email == form.email.data).first():
            return render_template('register.html', title='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                                   form=form,
                                   message="–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å")
        user = User(
            name=form.name.data,
            email=form.email.data
        )
        user.set_password(form.password.data)
        db_sess.add(user)
        db_sess.commit()
        return redirect('/login')
    return render_template('register.html', title='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', form=form)


@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        db_sess = db_session.create_session()
        user = db_sess.query(User).filter(User.email == form.email.data).first()
        if user and user.check_password(form.password.data):
            login_user(user, remember=form.remember_me.data)
            global LOGIN, id_log
            LOGIN = True
            log = request.form.get('email')
            with open('pass.txt', 'r+', encoding='utf8') as f:
                f.truncate(0)
                f.write(request.form.get('password'))
            con = sqlite3.connect('db/blogs.db')
            cur = con.cursor()
            id_log = cur.execute("""SELECT id FROM users WHERE email = ?""", (log, )).fetchone()[0]
            con.close()
            return redirect("/")
        return render_template('login.html',
                               message="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
                               form=form)
    return render_template('login.html', title='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', form=form)


@app.route('/leave', methods=['GET', 'POST'])
def leave():
    global LOGIN
    LOGIN = False
    return render_template("base.html", title='–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')


@app.route('/delete_acc', methods=['GET', 'POST'])
def delete_acc():
    global LOGIN
    LOGIN = False
    # —Ç—É—Ç –Ω–∞–¥–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤ –±—É–¥—É—â–µ–º –∏–∑ —Ç–≥ —Ç–æ–∂–µ)
    return render_template("base.html", title='–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')


@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.chat.type == 'private':
        chat_id = message.chat.id
        if message.text == '‚úÖ –î–æ–±–∞–≤–∏—Ç—å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bot.register_next_step_handler(message, add_plan)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

            markup.add(item1, item2)

            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞', reply_markup=markup)

        elif message.text == '–î–∞':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–î–∞!')
            item2 = types.KeyboardButton('–ü–æ–∂–∞–ª—É–π, –Ω–µ —Å–µ–π—á–∞—Å')
            markup.add(item1, item2)

            bot.send_message(chat_id, '–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç?', reply_markup=markup)

        elif message.text == '–î–∞!':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bot.register_next_step_handler(message, tg_login)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            markup.add(item1, item2)

            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', reply_markup=markup)

        elif message.text == '–ù–µ—Ç':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–•–æ—á—É!')
            item2 = types.KeyboardButton('–ü–æ–∂–∞–ª—É–π, –Ω–µ —Å–µ–π—á–∞—Å')
            markup.add(item1, item2)

            bot.send_message(chat_id, '–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç?', reply_markup=markup)

        elif message.text == '–•–æ—á—É!':
            # —Ç—É—Ç –Ω–∞–¥–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç –ø–æ—Å–ª–µ —Ö–æ—Å—Ç–∞
            pass

        elif message.text == '–ü–æ–∂–∞–ª—É–π, –Ω–µ —Å–µ–π—á–∞—Å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

            markup.add(item1, item2)

            bot.send_message(chat_id, '–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                             reply_markup=markup)

        elif message.text == '‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if chat_id not in plans or not plans[chat_id]:
                item1 = types.KeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å')
                item2 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å')
                item3 = types.KeyboardButton('ü§î –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?')
                back = types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
                markup.add(item1, item2, item3, back)

                bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤', reply_markup=markup)

            else:
                h = ''
                for i, plan in enumerate(plans[chat_id][::2], start=1):
                    h += str(i) + '. '
                    h += plan
                    h += '\n'
                item1 = types.KeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å')
                item2 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å')
                item3 = types.KeyboardButton('ü§î –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?')
                back = types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
                markup.add(item1, item2, item3, back)

                bot.send_message(chat_id, h, reply_markup=markup)

        elif message.text == 'üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('üìñ –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞')
            item2 = types.KeyboardButton('‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?')
            back = types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
            markup.add(item1, item2, back)

            bot.send_message(chat_id, '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å?', reply_markup=markup)

        elif message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

            markup.add(item1, item2)

            bot.send_message(chat_id, '‚¨Ö –ù–∞–∑–∞–¥', reply_markup=markup)

        elif message.text == '‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bot.send_message(message.chat.id, '–î–æ–±–∞–≤—å—Ç–µ –ø–ª–∞–Ω –∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ, —Å–ª–µ–¥—É—è —É–∫–∞–∑–∞–Ω–∏—è–º, –≤–≤–µ–¥–∏—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ '
                                              '–ø–ª–∞–Ω–∞\n–î–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú')
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

            markup.add(item1, item2)

            bot.send_message(chat_id, '–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n–£–±–æ—Ä–∫–∞\n16.08.2023 10:30', reply_markup=markup)

        elif message.text == 'üìñ –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

            markup.add(item1, item2)

            bot.send_message(chat_id, '–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ—Ç —Å–æ–±–æ–π —É–¥–æ–±–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏\n–í –Ω–µ–≥–æ –≤—ã '
                                      '–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –ø–ª–∞–Ω—ã –∏ –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç –≤–∞–º –æ –Ω–∏—Ö\n–¢–∞–∫–∂–µ '
                                      '–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ '
                                      '–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—ã—Ç—å –æ –±—ã—Ç–æ–≤—ã—Ö '
                                      '–¥–µ–ª–∞—Ö', reply_markup=markup)

        elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if chat_id not in plans or not plans[chat_id]:
                item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
                item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                markup.add(item1, item2)

                bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤', reply_markup=markup)

            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                bot.register_next_step_handler(message, delete_plan)
                item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
                item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

                markup.add(item1, item2)

                bot.send_message(chat_id, '–ö–∞–∫–æ–π –ø–ª–∞–Ω –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å? (–ù–∞–ø–∏—à–∏—Ç–µ)', reply_markup=markup)

        elif message.text == 'ü§î –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

            markup.add(item1, item2)
            if chat_id not in plans or not plans[chat_id]:
                bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–ª–∞–Ω', reply_markup=markup)

            else:
                bot.send_message(message.chat.id, '–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å? (–ù–∞–ø–∏—à–∏—Ç–µ)',
                                 reply_markup=markup)
                bot.register_next_step_handler(message, nap)


def tg_login(message):
    chat_id = message.chat.id
    email = message.text
    con = sqlite3.connect('db/blogs.db')
    cur = con.cursor()
    reg = cur.execute("""SELECT email from users""").fetchall()
    reg = [i[0] for i in reg]
    con.close()
    if email in reg:
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, tg_password, email)
    else:
        bot.send_message(chat_id, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, tg_login)


def tg_password(message, email):
    chat_id = message.chat.id
    password = message.text
    with open('pass.txt', 'r', encoding='utf8') as f:
        curr_password = f.readline()
    if password == curr_password:
        bot.send_message(chat_id, "–í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç")
        if chat_id not in plans:
            con = sqlite3.connect('db/blogs.db')
            cur = con.cursor()
            result = cur.execute("""SELECT title FROM jobs
                            WHERE connection=(SELECT id from users WHERE email = ?)""", (email, )).fetchall()
            lst = []
            for i in result:
                lst.append(i[0])
                lst.append('')
            con.close()
            plans[chat_id] = lst
    else:
        bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, tg_password, email)


def add_plan(message):
    chat_id = message.chat.id
    plan = message.text

    if chat_id not in plans:
        plans[chat_id] = [plan]
    else:
        plans[chat_id].append(plan)

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    bot.register_next_step_handler(message, add_to_list)


def add_to_list(message):
    chat_id = message.chat.id
    date_name = message.text
    days = ['31', '28', '31', '30', '31', '30', '31', '31', '30', '31', '30', '31']
    months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
    if len(date_name) == 16 and date_name[2] == '.' and date_name[5] == '.' and date_name[10] == ' '\
            and date_name[-3] == ':' and date_name[3:5].isdigit() and date_name[0:2].isdigit()\
            and date_name[6:10].isdigit() and date_name[11:13].isdigit() and date_name[14:].isdigit()\
            and int(date_name[6:10]) >= 2023 and date_name[3:5] in months:
        k = months.index(date_name[3:5])
        max_days = int(days[k])
        if date_name[3:5] == '02' and int(date_name[6:10]) % 4 == 0:
            max_days += 1
        if 0 < int(date_name[:2]) <= max_days and 0 <= int(date_name[11:13]) < 24 and 0 <= int(
                date_name[14:]) < 60:
            plans[chat_id].append(date_name)
            check_plans()
            bot.send_message(chat_id, "–ü–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            bot.send_message(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(message, add_to_list)
    else:
        bot.send_message(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, add_to_list)


def delete_plan(message):
    chat_id = message.chat.id
    del_plan = message.text
    if del_plan in plans[chat_id]:
        n = plans[chat_id].index(del_plan)

        plans[chat_id].remove(del_plan)
        plans[chat_id].remove(plans[chat_id][n])
        bot.send_message(chat_id, '–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
    else:
        bot.send_message(chat_id, '–¢–∞–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ—Ç')


def nap(message):
    chat_id = message.chat.id
    mes_to_save = message.text

    if mes_to_save in plans[chat_id]:
        x = plans[chat_id].index(mes_to_save)
        if plans[chat_id][x + 1] != '':
            bot.send_message(message.chat.id,
                             f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞–Ω–µ {plans[chat_id][x]} –ø—Ä–∏–¥–µ—Ç {plans[chat_id][x + 1][:10]} —á–∏—Å–ª–∞'
                             f' –≤ {plans[chat_id][x + 1][11:]}')
        else:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –ø–ª–∞–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ—Ç')


def check_plans():
    current_time = dt.datetime.now()
    for z in list(plans.keys()):
        for plan in plans[z][::2]:
            n = plans[z].index(plan)
            if len(plans[z]) - 1 > n:
                if plans[z][n + 1] != '':
                    date_time_obj = dt.datetime.strptime(plans[z][n + 1], '%d.%m.%Y %H:%M')
                    if current_time > date_time_obj:
                        bot.send_message(z, f"–í—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∞ {plan} –Ω–∞—Å—Ç—É–ø–∏–ª–æ.\n–°–∫–æ—Ä–µ–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ!")
                        plans[z].remove(plan)
                        plans[z].remove(plans[z][n])

    threading.Timer(15, check_plans).start()


def bot_func():
    bot.polling()


if __name__ == '__main__':
    db_session.global_init("db/blogs.db")
    p = mp.Process(target=bot_func)
    p.start()
    app.run()
