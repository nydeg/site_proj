import sqlite3
import telebot
from telebot import types
import datetime as dt
import threading

bot = telebot.TeleBot('5830879893:AAGDZTLWWZwzzRkSFpWfUbTfYbL9TWHQehI')

plans = {}
tg_LOG = False


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–î–∞')
    item2 = types.KeyboardButton('–ù–µ—Ç')

    markup.add(item1, item2)

    global plans
    plans = {}

    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {0.first_name}!\n–Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, '
                                      '–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –ø–ª–∞–Ω–∞—Ö\n–í—ã '
                                      '—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Å–∞–π—Ç–µ?'.format(message.from_user),
                     reply_markup=markup)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.chat.type == 'private':
        chat_id = message.chat.id
        global tg_LOG
        if message.text == '‚úÖ –î–æ–±–∞–≤–∏—Ç—å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bot.register_next_step_handler(message, add_plan)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            if tg_LOG:
                item3 = types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
            else:
                item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')

            markup.add(item1, item2, item3)

            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞', reply_markup=markup)

        elif message.text == '–î–∞':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–î–∞!')
            item2 = types.KeyboardButton('–ü–æ–∂–∞–ª—É–π, –Ω–µ —Å–µ–π—á–∞—Å')
            markup.add(item1, item2)

            bot.send_message(chat_id, '–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç?', reply_markup=markup)

        elif message.text == '–î–∞!':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bot.register_next_step_handler(message, tg_login)
            item1 = types.KeyboardButton('–ü–æ–∂–∞–ª—É–π, –Ω–µ —Å–µ–π—á–∞—Å')
            markup.add(item1)

            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', reply_markup=markup)

        elif message.text == '–ù–µ—Ç':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–•–æ—á—É!')
            item2 = types.KeyboardButton('–ü–æ–∂–∞–ª—É–π, –Ω–µ —Å–µ–π—á–∞—Å')
            markup.add(item1, item2)

            bot.send_message(chat_id, '–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç?', reply_markup=markup)

        elif message.text == '–•–æ—á—É!':
            # —Ç—É—Ç –Ω–∞–¥–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç –ø–æ—Å–ª–µ —Ö–æ—Å—Ç–∞
            pass

        elif message.text == '–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bot.register_next_step_handler(message, tg_login)
            item1 = types.KeyboardButton('–ü–æ–∂–∞–ª—É–π, –Ω–µ —Å–µ–π—á–∞—Å')
            markup.add(item1)

            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', reply_markup=markup)

        elif message.text == '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            tg_LOG = False
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
            s = []
            for i in range(0, len(plans[chat_id]) - 1, 2):
                if plans[chat_id][i + 1] != '':
                    s.append(plans[chat_id][i])
                    s.append(plans[chat_id][i + 1])
            plans[chat_id] = s

            markup.add(item1, item2, item3)

            bot.send_message(chat_id, '–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                             reply_markup=markup)

        elif message.text == '–ü–æ–∂–∞–ª—É–π, –Ω–µ —Å–µ–π—á–∞—Å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')

            markup.add(item1, item2, item3)

            bot.send_message(chat_id, '–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                             reply_markup=markup)

        elif message.text == '‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if tg_LOG:
                update_plans(chat_id)
            if chat_id not in plans or not plans[chat_id]:
                item1 = types.KeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å')
                item2 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å')
                item3 = types.KeyboardButton('ü§î –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?')
                back = types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
                markup.add(item1, item2, item3, back)

                bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤', reply_markup=markup)

            else:
                h = ''
                for i, plan in enumerate(plans[chat_id][::2], start=1):
                    h += str(i) + '. '
                    h += plan
                    h += '\n'
                item1 = types.KeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å')
                item2 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å')
                item3 = types.KeyboardButton('ü§î –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?')
                back = types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
                markup.add(item1, item2, item3, back)

                bot.send_message(chat_id, h, reply_markup=markup)

        elif message.text == 'üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('üìñ –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞')
            item2 = types.KeyboardButton('‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?')
            back = types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
            markup.add(item1, item2, back)

            bot.send_message(chat_id, '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å?', reply_markup=markup)

        elif message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            if tg_LOG:
                item3 = types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
            else:
                item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')

            markup.add(item1, item2, item3)

            bot.send_message(chat_id, '‚¨Ö –ù–∞–∑–∞–¥', reply_markup=markup)

        elif message.text == '‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bot.send_message(message.chat.id, '–î–æ–±–∞–≤—å—Ç–µ –ø–ª–∞–Ω –∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ, —Å–ª–µ–¥—É—è —É–∫–∞–∑–∞–Ω–∏—è–º, –≤–≤–µ–¥–∏—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ '
                                              '–ø–ª–∞–Ω–∞\n–î–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú')
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            if tg_LOG:
                item3 = types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
            else:
                item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')

            markup.add(item1, item2, item3)

            bot.send_message(chat_id, '–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n–£–±–æ—Ä–∫–∞\n16.08.2023 10:30', reply_markup=markup)

        elif message.text == 'üìñ –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            if tg_LOG:
                item3 = types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
            else:
                item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')

            markup.add(item1, item2, item3)

            bot.send_message(chat_id, '–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ—Ç —Å–æ–±–æ–π —É–¥–æ–±–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏\n–í –Ω–µ–≥–æ –≤—ã '
                                      '–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –ø–ª–∞–Ω—ã, –∏ –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç –≤–∞–º –æ –Ω–∏—Ö\n–¢–∞–∫–∂–µ '
                                      '–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ '
                                      '–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—ã—Ç—å –æ –±—ã—Ç–æ–≤—ã—Ö '
                                      '–¥–µ–ª–∞—Ö', reply_markup=markup)

        elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if tg_LOG:
                update_plans(chat_id)
            if chat_id not in plans or not plans[chat_id]:
                item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
                item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                if tg_LOG:
                    item3 = types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
                else:
                    item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
                markup.add(item1, item2, item3)

                bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤', reply_markup=markup)

            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                bot.register_next_step_handler(message, delete_plan)
                item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
                item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                if tg_LOG:
                    item3 = types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
                else:
                    item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')

                markup.add(item1, item2, item3)

                bot.send_message(chat_id, '–ö–∞–∫–æ–π –ø–ª–∞–Ω –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å? (–ù–∞–ø–∏—à–∏—Ç–µ)', reply_markup=markup)

        elif message.text == 'ü§î –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
            item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            if tg_LOG:
                update_plans(chat_id)
                item3 = types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
            else:
                item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')

            markup.add(item1, item2, item3)
            if chat_id not in plans or not plans[chat_id]:
                bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–ª–∞–Ω', reply_markup=markup)

            else:
                bot.send_message(message.chat.id, '–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å? (–ù–∞–ø–∏—à–∏—Ç–µ)',
                                 reply_markup=markup)
                bot.register_next_step_handler(message, nap)


def tg_login(message):
    chat_id = message.chat.id
    email = message.text
    con = sqlite3.connect('db/blogs.db')
    cur = con.cursor()
    reg = cur.execute("""SELECT email from users""").fetchall()
    reg = [i[0] for i in reg]
    con.close()
    if email in reg:
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, tg_password, email)
    elif email == '–ü–æ–∂–∞–ª—É–π, –Ω–µ —Å–µ–π—á–∞—Å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
        item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
        markup.add(item1, item2, item3)
        bot.send_message(chat_id, "–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", reply_markup=markup)
    else:
        bot.send_message(chat_id, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, tg_login)


def tg_password(message, email):
    chat_id = message.chat.id
    password = message.text
    with open('pass.txt', 'r', encoding='utf8') as f:
        text = f.readline().split()
        curr_password = text[0]
        curr_email = text[1]
    if password == curr_password:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
        item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        item3 = types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
        markup.add(item1, item2, item3)
        con = sqlite3.connect('db/blogs.db')
        cur = con.cursor()
        result = cur.execute("""SELECT title FROM jobs
                        WHERE connection=(SELECT id from users WHERE email = ?)""", (email, )).fetchall()
        cur.execute("""UPDATE users
                    SET tg_id = ?
                    WHERE email = ?""", (chat_id, curr_email))
        con.commit()
        lst = []
        for i in result:
            lst.append(i[0])
            lst.append('')
        con.close()
        if chat_id not in plans:
            plans[chat_id] = lst
        else:
            plans[chat_id] = lst + plans[chat_id]
        global tg_LOG
        tg_LOG = True
        bot.send_message(chat_id, "–í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", reply_markup=markup)
    elif password == '–ü–æ–∂–∞–ª—É–π, –Ω–µ —Å–µ–π—á–∞—Å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('‚úâ –ú–æ–∏ –ø–ª–∞–Ω—ã')
        item2 = types.KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        item3 = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
        markup.add(item1, item2, item3)
        bot.send_message(chat_id, "–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", reply_markup=markup)
    else:
        bot.send_message(chat_id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, tg_password, email)


def add_plan(message):
    chat_id = message.chat.id
    plan = message.text

    if chat_id not in plans:
        plans[chat_id] = [plan]
    else:
        plans[chat_id].append(plan)

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    bot.register_next_step_handler(message, add_to_list)


def add_to_list(message):
    chat_id = message.chat.id
    date_name = message.text
    days = ['31', '28', '31', '30', '31', '30', '31', '31', '30', '31', '30', '31']
    months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
    if len(date_name) == 16 and date_name[2] == '.' and date_name[5] == '.' and date_name[10] == ' '\
            and date_name[-3] == ':' and date_name[3:5].isdigit() and date_name[0:2].isdigit()\
            and date_name[6:10].isdigit() and date_name[11:13].isdigit() and date_name[14:].isdigit()\
            and int(date_name[6:10]) >= 2023 and date_name[3:5] in months:
        k = months.index(date_name[3:5])
        max_days = int(days[k])
        if date_name[3:5] == '02' and int(date_name[6:10]) % 4 == 0:
            max_days += 1
        if 0 < int(date_name[:2]) <= max_days and 0 <= int(date_name[11:13]) < 24 and 0 <= int(
                date_name[14:]) < 60:
            plans[chat_id].append(date_name)
            if tg_LOG:
                con = sqlite3.connect('db/blogs.db')
                cur = con.cursor()
                numb = len(cur.execute("""SELECT title from jobs""").fetchall()) + 1
                connection = int(cur.execute("""SELECT id from users WHERE tg_id = ?""", (chat_id, )).fetchone()[0])
                cur.execute("""INSERT INTO jobs VALUES(?, ?, ?, ?, ?)""", (numb, connection, plans[chat_id][-2],
                                                                           False, plans[chat_id][-1]))
                con.commit()
                con.close()
            bot.send_message(chat_id, "–ü–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            bot.send_message(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(message, add_to_list)
    else:
        bot.send_message(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, add_to_list)


def delete_plan(message):
    chat_id = message.chat.id
    del_plan = message.text
    global tg_LOG
    if del_plan in plans[chat_id]:
        n = plans[chat_id].index(del_plan)
        if tg_LOG:
            con = sqlite3.connect('db/blogs.db')
            cur = con.cursor()
            cur.execute("""DELETE FROM jobs
                        WHERE connection=(SELECT id from users WHERE tg_id = ?) AND
                        title = ? AND date = ?""", (chat_id, del_plan, plans[chat_id][n + 1]))
            con.commit()
            con.close()
        plans[chat_id].remove(del_plan)
        plans[chat_id].remove(plans[chat_id][n])
        bot.send_message(chat_id, '–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
    else:
        bot.send_message(chat_id, '–¢–∞–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ—Ç')


def nap(message):
    chat_id = message.chat.id
    mes_to_save = message.text

    if mes_to_save in plans[chat_id]:
        x = plans[chat_id].index(mes_to_save)
        if plans[chat_id][x + 1] != '':
            bot.send_message(message.chat.id,
                             f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞–Ω–µ {plans[chat_id][x]} –ø—Ä–∏–¥–µ—Ç {plans[chat_id][x + 1][:10]} —á–∏—Å–ª–∞'
                             f' –≤ {plans[chat_id][x + 1][11:]}')
        else:
            bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –ø–ª–∞–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ—Ç')


def update_plans(chat_id):
    con = sqlite3.connect('db/blogs.db')
    cur = con.cursor()
    new_plans = cur.execute("""SELECT title, date FROM jobs
                            WHERE connection=(SELECT id from users WHERE tg_id = ?)""", (chat_id,)).fetchall()
    lst = []
    for x in new_plans:
        lst.append(x[0])
        if x[1] is None:
            lst.append('')
        else:
            lst.append(x[1])
    plans[chat_id] = lst
    con.close()


def check_plans():
    current_time = dt.datetime.now()
    global tg_LOG
    for z in list(plans.keys()):
        for plan in plans[z][::2]:
            n = plans[z].index(plan)
            if len(plans[z]) - 1 > n:
                if plans[z][n + 1] != '':
                    date_time_obj = dt.datetime.strptime(plans[z][n + 1], '%d.%m.%Y %H:%M')
                    if current_time > date_time_obj:
                        bot.send_message(z, f"–í—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∞ {plan} –Ω–∞—Å—Ç—É–ø–∏–ª–æ.\n–°–∫–æ—Ä–µ–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ!")
                        if tg_LOG:
                            con = sqlite3.connect('db/blogs.db')
                            cur = con.cursor()
                            cur.execute("""DELETE FROM jobs
                                WHERE connection=(SELECT id from users WHERE tg_id = ?) AND title = ?
                                AND date = ?""", (z, plan, plans[z][n + 1]))
                            planss = cur.execute("""SELECT title from jobs""").fetchall()
                            planss = [i[0] for i in planss]
                            length = len(planss)
                            if length > 0:
                                for my_id in range(1, length + 1):
                                    cur.execute("""UPDATE jobs
                                                SET id = ?
                                                WHERE title = ?""", (my_id, planss[my_id - 1]))
                            con.commit()
                            con.close()

                        plans[z].remove(plan)
                        plans[z].remove(plans[z][n])

    threading.Timer(15, check_plans).start()


def bot_func():
    check_plans()
    bot.polling()
